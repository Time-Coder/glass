#ifndef __FIGURE_H__
#define __FIGURE_H__

#include <iostream>

#include "glass/common.h"
#include "glass/utils/tictoc.h"
#include "glass/vec"

typedef unsigned int uint;

struct GLFWwindow;
class Image;
class GLFigure
{
	struct Constructor
	{
		friend class GLFigure;
		Constructor();
		~Constructor();
	};
	static Constructor constructor;

protected:
	std::string __name = "Figure";
	int __width = 800;
	int __height = 600;
	bool __auto_clear = true;
	vec4 __color = vec4(0.1569, 0.1608, 0.1373, 1.0);
	GLFWwindow* __window = NULL;
	static GLFigure* parent;

private:
	static Timer timer;
	static Scheduler scheduler;
	static double __current_x;
	static double __current_y;
	static double __current_t;
	static double __last_x;
	static double __last_y;
	static double __last_t;
	static double __last_left_press_x;
	static double __last_left_press_y;
	static double __last_left_release_x;
	static double __last_left_release_y;
	static double __last_right_press_x;
	static double __last_right_press_y;
	static double __last_right_release_x;
	static double __last_right_release_y;
	static double __last_middle_press_x;
	static double __last_middle_press_y;
	static double __last_middle_release_x;
	static double __last_middle_release_y;
	static bool left_pressed;
	static bool middle_pressed;
	static bool right_pressed;
	static double left_press_time;
	static double right_press_time;
	static double middle_press_time;
	static double left_click_time;
	static double right_click_time;
	static double middle_click_time;
	static bool mouse_stoped;
	static std::map<uint, std::string> key_map;
	static bool is_glad_init;

private:
	static void glad_init();
	static void mouse_position_callback(GLFWwindow* _window, double x, double y);
	static void mouse_button_callback(GLFWwindow* _window, int button, int action, int mods);
	static void __scroll_callback(GLFWwindow* _window, double xoffset, double yoffset);
	static void __mouse_stop_move_callback();
	static void __change_size_callback(GLFWwindow* _window, int width, int height);
	static void mouse_enter_leave_callback(GLFWwindow* _window, int flag);
	static void __keyboard_callback(GLFWwindow* window, int key, int scancode, int action, int mods);

protected:
	static int current_x();
	static int current_y();
	static double current_t();
	static int last_x();
	static int last_y();
	static double last_t();
	static int dx();
	static int dy();
	static double dt();
	static double fps();
	static int last_left_press_x();
	static int last_left_press_y();
	static int last_left_release_x();
	static int last_left_release_y();
	static int last_right_press_x();
	static int last_right_press_y();
	static int last_right_release_x();
	static int last_right_release_y();
	static int last_middle_press_x();
	static int last_middle_press_y();
	static int last_middle_release_x();
	static int last_middle_release_y();
	static bool is_left_pressed();
	static bool is_middle_pressed();
	static bool is_right_pressed();

	virtual void onKeyPress(const std::string& key);
	virtual void onKeyRelease(const std::string& key);
	virtual void onKeyRepeat(const std::string& key);
	virtual void onDrag();
	virtual void onRightDrag();
	virtual void onMiddleDrag();
	virtual void onMouseLeave();
	virtual void onMouseEnter();
	virtual void onMouseStartMove();
	virtual void onMouseMove();
	virtual void onMouseStopMove();
	virtual void onDoubleClick();
	virtual void onRightDoubleClick();
	virtual void onMiddleDoubleClick();
	virtual void onClick();
	virtual void onRightClick();
	virtual void onMiddleClick();
	virtual void onLeftPress();
	virtual void onRightPress();
	virtual void onMiddlePress();
	virtual void onLeftRelease();
	virtual void onRightRelease();
	virtual void onMiddleRelease();
	virtual void onScroll(int scroll_step);
	virtual void onChangeSize(int width, int height);

public:
	GLFigure(int width = 800, int height = 600, const std::string& name = "Figure", const vec4& color = vec4(0.1569, 0.1608, 0.1373, 1.0));
	GLFigure(GLFigure&& figure);
	virtual ~GLFigure();
	void autoClear(bool flag);
	bool autoClear();
	GLFWwindow* window();
	uint width()const;
	uint height()const;
	virtual void prepare();
	virtual void draw();
	virtual void update();
	void show();
	void setIcon(const Image& image);
	void setIcon(const std::string& filename);
	void hideCursor();
	void showCursor();
};

#endif