#ifndef __MATERIAL__
#define __MATERIAL__

#include <vector>

#include "glass/Uniform"
#include "glass/sampler2D"

struct Material: public Uniform::Bindable
{
    // for glsl
    vec3 diffuse_color;
    vec3 mask_color = vec3(1);
    float specular_strength;
    float shininess;
    float height_factor = 0.1f;

    sampler2D diffuse_map;
    sampler2D specular_map;
    sampler2D reflection_map;
    sampler2D bump_map;
    sampler2D normal_map;

    bool using_diffuse_map = false;
    bool using_specular_map = false;
    bool using_reflection_map = false;
    bool bump_inverse = false;
    bool using_bump_map = false;
    bool using_normal_map = false;
    // end

    enum TextureType
    {
        DIFFUSE,
        SPECULAR,
        NORMAL,
        BUMP
    };

	Material(std::string name = "");
	static void ls();
	static std::vector<std::string> list();

    void setTexture(const std::string& filename, TextureType type = DIFFUSE, float height = 0.1f, bool _inverse = false);
    void setTexture(const sampler2D& sampler, TextureType type = DIFFUSE, float height = 0.1f, bool _inverse = false);

    void useTexture(TextureType type, bool flag = true);
    std::string key()const;
};

#endif