#ifndef __SPOTLIGHT__
#define __SPOTLIGHT__

#include "glass/mat"
#include "glass/samplerCube"
#include "glass/Model"

#include "glass/utils/helper.h"

class SpotLight: public Uniform::Bindable
{
	// for glsl	
	vec3 __color = vec3(1.0f, 1.0f, 1.0f);
	float __brightness = 1.0f;
	float __radius = 0;
	float Kl = 0.09f, Kq = 0.032f;
	float __cutoff_angle = PI/8;
	float __soft_distance = 0.1;
	vec3 __position = vec3(0);
	vec3 __direction = vec3(0, 0, -1);
	bool __using_shadow = false;
	mat4 __mat[6];

public:
	samplerCube depth_map;
	// end

	Model shape;

private:
	float __yaw = 0.0f, __pitch = 0.0f;
	float __coverage = 50;
	bool is_open = true;

private:
	void update_mat();
	void update_internal();

public:
	SpotLight();

	float coverage()const;
	float radius()const;
	float brightness()const;
	vec3 color()const;
	vec3 position()const;

	void setCoverage(float distance);
	void setBrightness(float _brightness);
	void setColor(const vec3& _color);
	void setColor(float r, float g, float b);

	void setPosition(const vec3& v);
	void setPosition(float x, float y, float z);
	void move(float dx, float dy, float dz);
	void move(const vec3& v);
	void moveTo(float x, float y, float z);
	void moveTo(const vec3& v);
	void moveX(float dx);
	void moveY(float dy);
	void moveZ(float dz);
	void moveXTo(float x);
	void moveYTo(float y);
	void moveZTo(float z);

	vec3 direction()const;
	void setDirection(float x, float y, float z);
	void setDirection(const vec3& _direction);

	void yaw(float dpsi); // 偏航
	void pitch(float dtheta); // 俯仰

	float yaw()const; // 偏航
	float pitch()const; // 俯仰

	void yawTo(float _psi); // 偏航
	void pitchTo(float _theta); // 俯仰

	float cutoffAngle()const;
	void setCutoffAngle(const float angle);

	float softDistance()const;
	void setSoftDistance(float distance);

	mat4& mat(int i);
	void useShadow(bool flag = true);
	bool usingShadow()const;
	void setShape(const Model& model);

	void bind();
	void unbind();

	void open();
	void close();
	bool isOpen()const;
	bool isClose()const;
};

#endif