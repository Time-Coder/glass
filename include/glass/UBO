#ifndef __UBO__
#define __UBO__

#include <set>

#include "glass/Uniform"
#include "glass/BO"

class Counter
{
	int* data = NULL;
	uint length = 0;

public:
	void init(uint _length);
	Counter() {}
	Counter(uint _length);
	~Counter();
	uint get()const;
	void borrow(uint value);
	void put_back(uint value);
};

class UBO: public BO
{
	class Reference
	{
		UBO* parent = NULL;
		std::string name;

	public:
		Reference(UBO* _parent, const std::string& _name);

		std::string type()const;
		uint size()const;
		int offset()const;

		template<class DataType>
		void operator =(const DataType& value);

		Reference operator [](const std::string& sub_name)const;
		Reference operator [](uint index)const;

		bool operator ==(const Reference& ref)const;
		bool operator !=(const Reference& ref)const;
	};

	struct UBO_Instance
	{
		uint binding_point = 0;
		Uniform::BlockMap::Reference block;
	};

private:
	static bool is_poll_init;
	static Counter binding_points_poll;

private:
	void init();
	void del();
	bool is_atom(const std::string& name);
	void copy(const UBO& ubo);

public:
	UBO();
	UBO(const UBO& ubo);
	UBO(UBO&& ubo);
	virtual ~UBO();

	template<class DataType>
	UBO& operator =(const DataType& ubo);

	UBO& operator =(UBO&& ubo);

	Reference operator [](const std::string& member_name);

	void bind(uint point);
	void bind();
	uint bindingPoint();
	void setStructure(const Uniform::BlockMap::Reference& block);

	template<class DataType>
	void set(const std::string& name, const DataType& value);

	void* set(const std::string& name, void* ptr_value);

	void set_atom(const std::string& name, void* ptr_value);

	template<class DataType>
	void set_atom(const std::string& name, const DataType& value);
	
	void set_bool(const std::string& name, bool value);
	void set_uint(const std::string& name, const uint& value);
	void set_int(const std::string& name, const int& value);
	void set_float(const std::string& name, const float& value);
	void set_double(const std::string& name, const double& value);
	void set_bvec2(const std::string& name, const bvec2& value);
	void set_bvec3(const std::string& name, const bvec3& value);
	void set_bvec4(const std::string& name, const bvec4& value);
	void set_ivec2(const std::string& name, const ivec2& value);
	void set_ivec3(const std::string& name, const ivec3& value);
	void set_ivec4(const std::string& name, const ivec4& value);
	void set_uvec2(const std::string& name, const uvec2& value);
	void set_uvec3(const std::string& name, const uvec3& value);
	void set_uvec4(const std::string& name, const uvec4& value);
	void set_vec2(const std::string& name, const vec2& value);
	void set_vec3(const std::string& name, const vec3& value);
	void set_vec4(const std::string& name, const vec4& value);
	void set_dvec2(const std::string& name, const dvec2& value);
	void set_dvec3(const std::string& name, const dvec3& value);
	void set_dvec4(const std::string& name, const dvec4& value);
	void set_mat2(const std::string& name, mat2 value);
	void set_mat3(const std::string& name, mat3 value);
	void set_mat4(const std::string& name, mat4 value);
};

template<class DataType>
void UBO::set_atom(const std::string& name, const DataType& value)
{
	if(!userData<UBO_Instance>()->block.contains(name))
	{
		throw glass::KeyError(name + "is not a member of uniform block " + userData<UBO_Instance>()->block.name);
	}
	std::string type = userData<UBO_Instance>()->block[name].type;

	__SET_ATOM_GENERAL_CODE
	else
	{
		throw glass::TypeError("uniform block member " + name + " is not an atom variable.");
	}
}

template<class DataType>
void UBO::Reference::operator =(const DataType& value)
{
	parent->set(name, value);
}

template<class DataType>
void UBO::set(const std::string& name, const DataType& value)
{
	if(userData<UBO_Instance>()->block.empty())
	{
		throw glass::RuntimeError("Please call UBO::setStructure(Uniform::Block) before assign value.");
	}

	userData<UBO_Instance>()->block.parent->refresh();

	if(!userData<UBO_Instance>()->block.contains(name))
	{
		throw glass::KeyError(name + " is not a member of uniform block " + userData<UBO_Instance>()->block.name);
	}

	if(is_atom(name))
	{
		set_atom(name, value);
		return;
	}

	std::string type = userData<UBO_Instance>()->block[name].type;
	if(type != type_name(DataType))
	{
		throw glass::TypeError("Cannot convert " + type_name(DataType) + " to " + type + ".");
	}
	userData<UBO_Instance>()->block.parent->please_define(type);

	if(userData<UBO_Instance>()->block.parent->defined_structs.count(type))
	{
		unsigned long long host_hash = userData<UBO_Instance>()->block.parent->defined_structs[type].host_hash;
		if(host_hash != 0 && typeid(DataType).hash_code() != host_hash)
		{
			throw glass::TypeError("Cannot convert host type " + type_name(DataType) + " to GLSL type " + type);
		}
	}

	if(sizeof(DataType) < userData<UBO_Instance>()->block[name].size)
	{
		throw glass::TypeError("Cannot convert host type " + type_name(DataType) + " to glsl type " + type);
	}

	unsigned char* ptr = (unsigned char*)(&(value));
	if(std::is_base_of<Uniform::Bindable, DataType>::value && 
	   (userData<UBO_Instance>()->block.parent->defined_structs.count(type) == 0 ||
	    userData<UBO_Instance>()->block.parent->defined_structs[type].host_hash == 0) )
	{
		ptr += Uniform::Bindable::offset;
	}
	for(std::string atom : userData<UBO_Instance>()->block[name].atoms)
	{
		ptr += userData<UBO_Instance>()->block[atom].offset;
		set_atom(atom, (void*)(ptr));
		ptr += userData<UBO_Instance>()->block[atom].size + userData<UBO_Instance>()->block[atom].padding_size;
	}
}

template<class DataType>
UBO& UBO::operator =(const DataType& value)
{
	if(same_type(DataType, UBO))
	{
		copy(force_cast<UBO>(value));
		return *this;
	}

	void* ptr = (void*)(&value);
	void* ptr_end = (void*)((unsigned char*)ptr + sizeof(value));

	if(std::is_base_of<Uniform::Bindable, DataType>::value &&
	   (userData<UBO_Instance>()->block.parent->defined_structs.count(type_name(DataType)) == 0 ||
	   	userData<UBO_Instance>()->block.parent->defined_structs[type_name(DataType)].host_hash == 0) )
	{
		ptr = (void*)((unsigned char*)ptr + Uniform::Bindable::offset);
	}

	for(int i = 0; i < userData<UBO_Instance>()->block.instance()->members.size(); i++)
	{
		if(userData<UBO_Instance>()->block.instance()->members[i].name.find(".") == std::string::npos &&
		   userData<UBO_Instance>()->block.instance()->members[i].name.find("[") == std::string::npos)
		{
			ptr = this->set(userData<UBO_Instance>()->block.instance()->members[i].name, ptr);
			if(ptr >= ptr_end)
			{
				break;
			}
		}
	}

	return *this;
}

#endif