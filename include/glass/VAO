#ifndef __VAO__
#define __VAO__

#include <set>
#include <map>

#include "glass/common.h"
#include "glass/VBO"
#include "glass/EBO"

struct VertexAttribPointer
{
	uint location = 0;
	uint vertex_size = 0;
	uint dtype = GL_FLOAT;
	uint should_normalize = GL_FALSE;
	uint stride = 0;
	uint offset = 0;

	VBO vbo;

	VertexAttribPointer(uint _location = 0, uint _vertex_size = 0, uint _dtype = GL_FLOAT, uint _should_normalize = GL_FALSE, uint _stride = 0, uint _offset = 0);
	VertexAttribPointer& operator ()(uint _vertex_size, uint _dtype = GL_FLOAT, uint _should_normalize = GL_FALSE, uint _stride = 0, uint _offset = 0);

	void interp(const VBO& _vbo);
	void divisor(uint n);
	bool empty()const;
};

class VAO
{
	struct Instance
	{
		EBO ebo;
		std::map<uint, VertexAttribPointer> map_VAP;
		uint n_sources = 0;
	};

public:
	enum DrawType
	{
		POINTS = GL_POINTS,
		LINE_STRIP = GL_LINE_STRIP,
		TRIANGLES = GL_TRIANGLES
	};

private:
	static std::unordered_map<uint, Instance> existing_VAOs;
	static uint active_VAO;

private:
	uint _id = 0;
	
private:
	void init();
	void del();

public:
	VAO();
	VAO(const VAO& vao);
	VAO(VAO&& vao);
	VAO& operator =(const VAO& ebo);
	VAO& operator =(VAO&& ebo);
	VertexAttribPointer& operator [](uint i);
	~VAO();
	uint id()const;
	EBO ebo()const;
	void bind();
	void unbind()const;
	bool isBind()const;
	bool empty()const;
	void drawArrays(uint n, DrawType type = TRIANGLES);
	void drawElements(DrawType type = TRIANGLES);
	void setEBO(const EBO& _ebo);
};

#endif