#ifndef __SAMPLER2D__
#define __SAMPLER2D__

#include <set>
#include <list>
#include <map>

#include "glass/common.h"
#include "glass/utils/image.h"
#include "glass/vec"

class Material;
class sampler2D
{
	friend class Material;
	struct Instance
	{
		uint id = 0;

		uint width = 0;
		uint height = 0;
		uint format = GL_RGB;
		uint dtype = GL_UNSIGNED_BYTE;

		uint s_wrap_type = GL_REPEAT;
		uint t_wrap_type = GL_REPEAT;
		uint min_filter_type = 0;
		uint mag_filter_type = 0;
		vec4 border_color;

		bool is_applied = false;
	};

	struct Constructor
	{
		friend class sampler2D;
		Constructor() {}
		~Constructor();
	};
	static Constructor constructor;

private:
	static uint active_sampler2D;
	static std::set<uint> existing_sampler2Ds;
	static std::list<Instance> existing_instances;
	static std::map<std::string, Instance*> path_map;
	
private:
	Instance* instance = NULL;

private:
	void init();
	void _bind();

public:
	static uint max_units();

public:
	sampler2D();
	sampler2D(uint __width, uint __height, uint __format = GL_RGB, uint __dtype = GL_UNSIGNED_BYTE);
	sampler2D(const Image& image);
	sampler2D(const std::string& filename);
	sampler2D(const sampler2D& sampler);
	sampler2D(sampler2D&& sampler);
	~sampler2D();
	sampler2D& operator =(const sampler2D& sampler);
	sampler2D& operator =(sampler2D&& sampler);
	uint id()const;
	uint width()const;
	uint height()const;
	uint format()const;
	uint dtype()const;
	bool isBind()const;
	bool empty()const;

	void border_color(const vec4& color);
	void border_color(const vec3& color);
	vec4 border_color()const;

	uint generateMipmap();

	uint wrap_s()const;
	uint wrap_t()const;
	void wrap_s(uint wrap_type);
	void wrap_t(uint wrap_type);
	void wrap(uint wrap_type_s, uint wrap_type_t = -1);
	// wrap_type can choose in
	// [GL_REPEAT, GL_MIRRORED_REPEAT, GL_CLAMP_TO_EDGE, GL_CLAMP_TO_BORDER]

	uint filter_min()const;
	uint filter_mag()const;
	void filter_min(uint filter_type);
	void filter_mag(uint filter_type);
	void filter(uint filter_type_min, uint filter_type_mag = -1);
	// filter_type can be choose in
	// [GL_NEAREST, GL_LINEAR]
	
	void bind();
	void unbind()const;
	void setImage(const Image& image);
	void setImage(const std::string& filename);
	void malloc(uint _width, uint _height, uint _format = GL_RGB, uint _dtype = GL_UNSIGNED_BYTE);
	void realloc(uint _width, uint _height);
};
// vec4 texture(const sampler2D& sampler, const vec2& texture_coord);

#endif